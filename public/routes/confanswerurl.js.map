{"version":3,"sources":["../../src/routes/confanswerurl.js"],"names":["plivo","router","express","Router","post","req","res","next","confRoomName","params","roomname","console","log","body","speakText","confCallbackUrl","confParams","callbackUrl","callbackMethod","response","Response","addSpeak","addConference","toXML","type","send","error","message"],"mappings":";;;;;;AAAA;;;;AACA;;IAAYA,K;;;;;;AAEZ,IAAMC,SAASC,kBAAQC,MAAR,EAAf;;AAEA;AACAF,OAAOG,IAAP,CAAY,YAAZ,EAA0B,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC5C;AACA,MAAIC,eAAeH,IAAII,MAAJ,CAAWC,QAA9B;AACAC,UAAQC,GAAR,wCAAiDJ,YAAjD;;AAEA;;AAEAG,UAAQC,GAAR;AACAD,UAAQC,GAAR,CAAYP,IAAIQ,IAAhB;;AAEA;;AAEA;AACA,MAAIC,qEAAJ;;AAEA;;AAEA;AACA,MAAIC,gFAA8EP,YAAlF;AACA,MAAIQ,aAAa;AACfC,iBAAaF,eADE;AAEfG,oBAAgB;AAFD,GAAjB;;AAKA;AACA,MAAIC,WAAWnB,MAAMoB,QAAN,EAAf;;AAEA;;AAEAD,WAASE,QAAT,CAAkBP,SAAlB,EA7B4C,CA6Bd;AAC9BK,WAASG,aAAT,CAAuBd,YAAvB,EAAqCQ,UAArC,EA9B4C,CA8BM;;AAElDL,UAAQC,GAAR,CAAYO,SAASI,KAAT,EAAZ,EAhC4C,CAgCb;;AAE/B;AACA,MAAI;AACFjB,QAAIkB,IAAJ,CAAS,iBAAT;AACAlB,QAAImB,IAAJ,CAASN,SAASI,KAAT,EAAT;AACD,GAHD,CAGE,OAAOG,KAAP,EAAc;AACdf,YAAQC,GAAR,2CAAoDc,KAApD;AACApB,QAAImB,IAAJ,CAAS;AACPE,eAAS;AADF,KAAT;AAGD;AACF,CA5CD;;kBA8Ce1B,M","file":"confanswerurl.js","sourcesContent":["import express from \"express\";\nimport * as plivo from \"plivo\";\n\nconst router = express.Router();\n\n//handle incoming post request from plivo on answer_url provided when making call\nrouter.post(\"/:roomname\", (req, res, next) => {\n  //first get the conference room name so we can set it in the xml response\n  var confRoomName = req.params.roomname;\n  console.log(`this conference room name will be ${confRoomName}`);\n\n  //understand if this request is for the moderator/leader because then we will respond with additional conference parameters\n\n  console.log(`this is the information received for inbound request`);\n  console.log(req.body);\n\n  //now prepare the XML --------\n\n  //first speak text that will be played when members join conference\n  var speakText = `Welcome. Please wait while we connect you to conference`;\n\n  //now the conference parameters\n\n  //conference callback url will also have the same parameterised url to make it easier to store join and leave events\n  var confCallbackUrl = `https://la-conference-demo.herokuapp.com/confcallbackurl/${confRoomName}`;\n  var confParams = {\n    callbackUrl: confCallbackUrl,\n    callbackMethod: \"POST\"\n  };\n\n  //now create response xml using plivo sdk's xml generator\n  var response = plivo.Response();\n\n  //add the elements - in order - of execution first speech then conference\n\n  response.addSpeak(speakText); //this will be played first\n  response.addConference(confRoomName, confParams); // now we don't need to know who is supposed to join which conference.\n\n  console.log(response.toXML()); //see the xml that will be sent..just logging\n\n  //send back the xml - easy part\n  try {\n    res.type(\"application/xml\");\n    res.send(response.toXML());\n  } catch (error) {\n    console.log(`error in sending back conference xml ${error}`);\n    res.send({\n      message: \"someting went wrong in creating conference\"\n    });\n  }\n});\n\nexport default router;\n"]}